Compiler Design Notes 

Description of the Compiler phases:
 Lex : Break the source file into individual words, or Tokens
 Parse: Analyze the phrase structure of the program.
 Semantic Actions: Build a piece of abstract syntax tree corresponding to each Phrase.
Semantic Analysis: Determine what each phrase means, relate uses of variables to their definitions, check types of expressions, request translation of each phrase
Frame Layout: Place variables, function-parameters, etc. into activation records (stack frames) in a machine-dependent way.
Translate: Produce intermediate representation trees (IR trees), a notation that is not tied to any particular source language or target-machine architecture. 
Canonicalize: Hoist side effects out of expressions, and clean up conditional branches, for the convenience of the next phases. 
Instruction Selection: Group the IR-trees into clumps that correspond to the actions of target-machine instructions. 
Control Flow Analysis: Analyze the sequence of instructions into a control flow graph that shows all the possible flows of control the program might follow when it executes. 
Dataflow Analysis: Gather information about the flow of information through variables of the program; for example, liveness analysis calculates the places where each program variable holds a still-needed value(is live)
Register Allocation: Choose a register to hold each of the variables and temporary values used by the program; variables not live at the same register.
Code Emission: Replace the temporary names in each machine instruction with a machine register.


This modularization is common in many real compilers. 
		
			
		




